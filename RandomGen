import random

class RandomGen(object):
  def __init__(self, nums, probs):
    # Values that may be returned by next_num()
    _random_nums = nums
    # Probability of the occurence of random_nums
    _probabilities = probs
    self._rand_dict = dict(zip(_random_nums, _probabilities))
    print self._rand_dict # for reference

  def next_num(self):
    """
    Returns one of the randomNums. When this method is called
    multiple times over a long period, it should return the
    numbers roughly with the initialized probabilities.
    """
    x = random.random() # Under assumption that total probability = 1 
    for k, v in sorted(self._rand_dict.iteritems(), key = lambda(k, v): (v, k), reverse = True):
      x -= v 
      if x < 0:
        return k 
        
        
# Test Case 1 
NUMS = [-1, 0, 1, 2, 3]
PROBS = [0.01, 0.3, 0.58, 0.1, 0.01]
gen = RandomGen(NUMS, PROBS)

# Result count  
TRIES = 100
count_dict = {}
for i in xrange(TRIES):
  n = gen.next_num()
  count_dict[n] = count_dict.get(n, 0) + 1 
print count_dict
        
